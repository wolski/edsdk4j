package edsdk.bindings;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * <i>native declaration : EDSDK\Header\EDSDKTypes.h</i><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
public class EdsDeviceInfo extends Structure {

    /// C type : EdsChar[256]
    public byte[] szPortName = new byte[256];
    /// C type : EdsChar[256]
    public byte[] szDeviceDescription = new byte[256];
    /// C type : EdsUInt32
    public NativeLong deviceSubType;
    /// C type : EdsUInt32
    public NativeLong reserved;

    public EdsDeviceInfo() {
        super();
        getFieldOrder();
    }

    @Override
    protected List getFieldOrder() {
        return Arrays.asList( new String[] { "szPortName",
                                            "szDeviceDescription",
                                            "deviceSubType", "reserved" } );

    }

    /**
     * @param szPortName C type : EdsChar[256]<br>
     * @param szDeviceDescription C type : EdsChar[256]<br>
     * @param deviceSubType C type : EdsUInt32<br>
     * @param reserved C type : EdsUInt32
     */
    public EdsDeviceInfo( final byte szPortName[],
                          final byte szDeviceDescription[],
                          final NativeLong deviceSubType,
                          final NativeLong reserved ) {
        super();
        if ( szPortName.length != this.szPortName.length ) {
            throw new IllegalArgumentException( "Wrong array size !" );
        }
        this.szPortName = szPortName;
        if ( szDeviceDescription.length != this.szDeviceDescription.length ) {
            throw new IllegalArgumentException( "Wrong array size !" );
        }
        this.szDeviceDescription = szDeviceDescription;
        this.deviceSubType = deviceSubType;
        this.reserved = reserved;
        getFieldOrder();
    }

    public EdsDeviceInfo( final Pointer pointer ) {
        super( pointer );
        read();
    }

    public static class ByReference extends EdsDeviceInfo implements Structure.ByReference {
        //generated
    }

    public static class ByValue extends EdsDeviceInfo implements Structure.ByValue {
        //generated
    }
}
